select(peak.gaze.velocity,
gaze.onset.ms,
head.onset.ms,
gaze.dur.ms,
gaze.gain,
peak.head.velocity,
head.contribution,
gaze.amp,
gaze.dur,
subject,
block,
blocknum,
trialnum,
target.amp,
head.amp,
IEPr,
post.VOR.EP,
gaze.steps,
total.gaze.amp,
total.gaze.dur,
total.head.contribution)->
hpp
# hpp <- mutate(hpp,amp.bins.combined=cut(abs(target.amp),breaks=c(0,10,20,30,40,50,60,70,80)))
hpp <- mutate(hpp,amp.bins.20 = cut(abs(target.amp),breaks=c(0,20,40,60,80)))
hpp <- mutate(hpp,amp.bins.15 = cut(abs(target.amp),breaks=c(0,15,30,45,60,75,90)))
hpp <- mutate(hpp,amp.bins.10 = cut(abs(target.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
hpp <- mutate(hpp,gaze.amp.bins.10 = cut(abs(gaze.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
hpp <-  mutate(hpp, iep_centered_10 = case_when(
abs(IEPr) <= 10 ~ "centered",
TRUE ~ "off-center"),
iep_bin_15= case_when(
IEPr > 0 & IEPr <=15 ~ '(0,15]',
IEPr > 15 & IEPr <=30 ~ '(15,30]',
IEPr < 0 & IEPr >= -15 ~ '[-15,0)',
IEPr < -15 & IEPr >= -30 ~ '[-30,-15)'),
iep_bin_6= case_when(
abs(IEPr) < 6 ~ '(-6, 6)',
IEPr > 6 & IEPr <=18 ~ '(6,18]',
IEPr > 18 & IEPr <=30 ~ '(18,30]',
IEPr < -6 & IEPr >= -18 ~ '[-18,6)',
IEPr < -18 & IEPr >= -30 ~ '[-30,-18)'),
gaze_dir = case_when(
gaze.amp> 0 ~ 'RIGHTWARD',
gaze.amp<0 ~ 'LEFTWARD'
),
iep_centered = as.factor(iep_centered_10),
iep_bin_6 = as.factor(iep_bin_6),
iep_bin_15 = as.factor(iep_bin_15),
gaze_dir = as.factor(gaze_dir))
#remove NA bins and extra blocks
hpp %>%
filter(!is.na(amp.bins.15))->
hpp
hpp %>%
mutate(blocknum= as.factor(blocknum),
block= as.factor(block),
subject=as.factor(subject))->
dataset
head(dataset)
qplot(IGP, data = dataset)+
facet_wrap(block)
# load data in 'global' chunk so it can be shared by all users of the dashboard
library(ggplot2)
library(mgcv)
library(plotly)
library(ggpubr)
library(dplyr)
hm <- readRDS('output/newdashboard2019-10-19.RDS')
samplerate<- 304.7508/1000
hm %>%
mutate(gaze.onset.ms=(gaze.onset-200)/samplerate,
head.onset.ms=(head.onset-200)/samplerate,
gaze.dur.ms=(gaze.dur)/samplerate,
IEPr=IEP*sign(gaze.amp),
gaze.gain=gaze.amp/target.amp) %>%
filter(missing.gs<15,
gaze.onset.ms>150,
gaze.onset.ms<500,
abs(peak.gaze.velocity) > 200) %>%
ungroup() %>%
select(peak.gaze.velocity,
gaze.onset.ms,
head.onset.ms,
gaze.dur.ms,
gaze.gain,
peak.head.velocity,
head.contribution,
gaze.amp,
gaze.dur,
subject,
block,
blocknum,
trialnum,
target.amp,
head.amp,
IEPr,
IGP,
post.VOR.EP,
gaze.steps,
total.gaze.amp,
total.gaze.dur,
total.head.contribution)->
hpp
# hpp <- mutate(hpp,amp.bins.combined=cut(abs(target.amp),breaks=c(0,10,20,30,40,50,60,70,80)))
hpp <- mutate(hpp,amp.bins.20 = cut(abs(target.amp),breaks=c(0,20,40,60,80)))
hpp <- mutate(hpp,amp.bins.15 = cut(abs(target.amp),breaks=c(0,15,30,45,60,75,90)))
hpp <- mutate(hpp,amp.bins.10 = cut(abs(target.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
hpp <- mutate(hpp,gaze.amp.bins.10 = cut(abs(gaze.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
hpp <-  mutate(hpp, iep_centered_10 = case_when(
abs(IEPr) <= 10 ~ "centered",
TRUE ~ "off-center"),
iep_bin_15= case_when(
IEPr > 0 & IEPr <=15 ~ '(0,15]',
IEPr > 15 & IEPr <=30 ~ '(15,30]',
IEPr < 0 & IEPr >= -15 ~ '[-15,0)',
IEPr < -15 & IEPr >= -30 ~ '[-30,-15)'),
iep_bin_6= case_when(
abs(IEPr) < 6 ~ '(-6, 6)',
IEPr > 6 & IEPr <=18 ~ '(6,18]',
IEPr > 18 & IEPr <=30 ~ '(18,30]',
IEPr < -6 & IEPr >= -18 ~ '[-18,6)',
IEPr < -18 & IEPr >= -30 ~ '[-30,-18)'),
gaze_dir = case_when(
gaze.amp> 0 ~ 'RIGHTWARD',
gaze.amp<0 ~ 'LEFTWARD'
),
iep_centered = as.factor(iep_centered_10),
iep_bin_6 = as.factor(iep_bin_6),
iep_bin_15 = as.factor(iep_bin_15),
gaze_dir = as.factor(gaze_dir))
#remove NA bins and extra blocks
hpp %>%
filter(!is.na(amp.bins.15))->
hpp
hpp %>%
mutate(blocknum= as.factor(blocknum),
block= as.factor(block),
subject=as.factor(subject))->
dataset
qplot(IGP, data = dataset)+
facet_wrap(block)
qplot(IGP, data = dataset)+
facet_wrap(block)
qplot(IGP, data = dataset)+
facet_wrap(~block)
qplot(IGP, data = dataset)+
facet_wrap(~block)+
geom_vline(0)
qplot(IGP, data = dataset)+
facet_wrap(~block)+
geom_vline(xposition = 0)
qplot(IGP, data = dataset)+
facet_wrap(~block)+
geom_vline(xintercept  = 0)
hm %>%
group_by(block) %>%
summarize(meanIGP = mean(IGP))->
IGP_summary
IGP_summary
qplot(meanIGP, data = IGP_summary)
h %>%
group_by(block) %>%
mutate(G = G - mean(IGP)) ->
h
h %>%
filter(!is.na(trialnum)) %>%
group_by(task,subject,block,trialnum) %>%
do(measureTrial(.))->
hm
hm %>%
mutate(gaze.onset.ms=(gaze.onset-200)/samplerate,
head.onset.ms=(head.onset-200)/samplerate,
gaze.dur.ms=(gaze.dur)/samplerate,
IEPr=IEP*sign(gaze.amp),
gaze.gain=gaze.amp/target.amp) %>%
filter(missing.gs<15,
gaze.onset.ms>150,
gaze.onset.ms<500,
abs(peak.gaze.velocity) > 200) %>%
ungroup() %>%
select(peak.gaze.velocity,
gaze.onset.ms,
head.onset.ms,
gaze.dur.ms,
gaze.gain,
peak.head.velocity,
head.contribution,
gaze.amp,
gaze.dur,
subject,
block,
blocknum,
trialnum,
target.amp,
head.amp,
IEPr,
IGP,
post.VOR.EP,
gaze.steps,
total.gaze.amp,
total.gaze.dur,
total.head.contribution)->
hpp
hpp <- mutate(hpp,amp.bins.20 = cut(abs(target.amp),breaks=c(0,20,40,60,80)))
hpp <- mutate(hpp,amp.bins.15 = cut(abs(target.amp),breaks=c(0,15,30,45,60,75,90)))
hpp <- mutate(hpp,amp.bins.10 = cut(abs(target.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
hpp <- mutate(hpp,gaze.amp.bins.10 = cut(abs(gaze.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
hpp <-  mutate(hpp, iep_centered_10 = case_when(
abs(IEPr) <= 10 ~ "centered",
TRUE ~ "off-center"),
iep_bin_15= case_when(
IEPr > 0 & IEPr <=15 ~ '(0,15]',
IEPr > 15 & IEPr <=30 ~ '(15,30]',
IEPr < 0 & IEPr >= -15 ~ '[-15,0)',
IEPr < -15 & IEPr >= -30 ~ '[-30,-15)'),
iep_bin_6= case_when(
abs(IEPr) < 6 ~ '(-6, 6)',
IEPr > 6 & IEPr <=18 ~ '(6,18]',
IEPr > 18 & IEPr <=30 ~ '(18,30]',
IEPr < -6 & IEPr >= -18 ~ '[-18,6)',
IEPr < -18 & IEPr >= -30 ~ '[-30,-18)'),
gaze_dir = case_when(
gaze.amp> 0 ~ 'RIGHTWARD',
gaze.amp<0 ~ 'LEFTWARD'
),
iep_centered = as.factor(iep_centered_10),
iep_bin_6 = as.factor(iep_bin_6),
iep_bin_15 = as.factor(iep_bin_15),
gaze_dir = as.factor(gaze_dir))
#remove NA bins and extra blocks
hpp %>%
filter(!is.na(amp.bins.15))->
hpp
hpp %>%
mutate(blocknum= as.factor(blocknum),
block= as.factor(block),
subject=as.factor(subject))->
dataset
qplot(IGP, data = dataset)+
facet_wrap(~block)+
geom_vline(xintercept  = 0)
saveRDS(dataset, 'centertest.RDS')
unique(hm$bocknum)
unique(hm$blocknum)
hm %>%
group_by(block) %>%
arrange(blocknum) %>%
mutate(block_simple = min_rank(blocknum))->
hm
unique(hm$block_simple)
hm %>%
group_by(block, blocknum) %>%
arrange(blocknum) %>%
mutate(block_simple = min_rank(blocknum))->
hm
unique(hm$block_simple)
hm$block
hm %>%
group_by(subject, blocknum) %>%
arrange(blocknum) %>%
mutate(block_simple = min_rank(blocknum))->
hm
unique(hm$block_simple)
hm$blocknum
hm$subject
unique(hm$subject)
hm %>%
group_by(subject) %>%
arrange(blocknum) %>%
mutate(block_simple = min_rank(blocknum))->
hm
filter(hm, subject == 'aj28')
aj = filter(hm, subject == 'aj28')
aj
unique(aj$blocknum)
aj$block_simple = min_ran(aj$blocknum)
aj$block_simple = min_rank(aj$blocknum)
unique(aj$block_simple)
aj$block_simple = rank(aj$blocknum)
unique(aj$block_simple)
unique(aj$task)
aj$block_simple = row_number(aj$blocknum)
unique(aj$block_simple)
aj$block_simple = dense_rank(aj$blocknum)
unique(aj$block_simple)
?dense_rank
hm %>% group_by(subject) %>% mutate(block_simple = dense_rank(blocknum))
hm$subject
hm %>%
group_by(subject) %>%
mutate(block_simple = dense_rank(blocknum))->
hm
unique(hm$block_simple)
#' 2019 full pipeline
#' 1) Use matlab function to put .csv files in a folder for analysis
#' 2) execute the script below
source('processing/loadfunctions.R')
source('processing/knighthelperfunctions.R')
files_location = 'data/'
samplerate<- 304.7508/1000
h <- loadGazeFiles(path = files_location)
#'Next: remove noise, blinks etc
h%>%
select(G,H,Targ,block,subject,task,blocknum)%>%
group_by(block) %>%
mutate(time=row_number(),
Graw=G,
G = replace(G, is.na(G), 0), #replace na with zero since that's how it was originally
G=replace(smooth(G,"3R"),G==0,NA), #mark missing data as NA rather than 0
Gnospline=G,
G= applyspline(G,6),
target.velocity=parabolicdiff(Targ,7)*samplerate,
Gv=parabolicdiff(G,7)*samplerate, #calculate velocity
Hv=parabolicdiff(H,7)*samplerate,
# gazeshifts=markMovementsDouble(Gv,threshold1=100,threshold2=10),
gazeshifts=markSaccadesDouble(Gv,threshold1=100,threshold2=20,
driftcorrect = FALSE,markFixations = FALSE),
headmovement=markMovementsDouble(Hv,threshold1=10,threshold2=4)) %>%
do(markTagetMovements(t=.,buffer=200,threshold=200,trial.length=500))%>%
filter(!is.na(trialnum))->
h
h %>%
group_by(block, trialnum) %>%
mutate(Targ = replace(Targ, (counter< 200 & task=='AS'), 0)) ->
h
h %>%
filter(!is.na(trialnum)) %>%
group_by(task,subject,block,trialnum) %>%
do(measureTrial(.))->
hm
h <- left_join(h, hm)
saveRDS(h, paste0('dashboards/output/newtrialetest', Sys.Date(),'.RDS'))
output_file = paste0('dashboards/output/newdashboard', Sys.Date(),'.RDS')
saveRDS(hm, output_file)
files <- list.files(path='data/',pattern='*.csv')
files
files <- task %in% files
task = 'AS'
files <- task %in% files
files
files <- list.files(path='data/',pattern='*.csv')
good_files = files[1]
good_files = files[task %in% files]
good_files
good_files = any(list %like% task)
good_files = list[any(list %like% task)]
task
list
good_files = any(files %like% task)
good_files
good_files = files[files %like% task]
good_files
good_files = files[files %like% "ST"]
good_files
#' 2019 full pipeline
#' 1) Use matlab function to put .csv files in a folder for analysis
#' 2) execute the script below
source('processing/loadfunctions.R')
source('processing/knighthelperfunctions.R')
files_location = 'data/'
task = 'ST'
samplerate<- 304.7508/1000
h <- loadGazeFiles(path = files_location, task = task)
#' 2019 full pipeline
#' 1) Use matlab function to put .csv files in a folder for analysis
#' 2) execute the script below
source('processing/loadfunctions.R')
source('processing/knighthelperfunctions.R')
files_location = 'data/'
task = 'ST'
samplerate<- 304.7508/1000
h <- loadGazeFiles(path = files_location, task = task)
#' 2019 full pipeline
#' 1) Use matlab function to put .csv files in a folder for analysis
#' 2) execute the script below
source('processing/loadfunctions.R')
source('processing/knighthelperfunctions.R')
files_location = 'data/'
task = 'AS'
samplerate<- 304.7508/1000
h <- loadGazeFiles(path = files_location, task = task)
#'Next: remove noise, blinks etc
h%>%
select(G,H,Targ,block,subject,task,blocknum)%>%
group_by(block) %>%
mutate(time=row_number(),
Graw=G,
G = replace(G, is.na(G), 0), #replace na with zero since that's how it was originally
G=replace(smooth(G,"3R"),G==0,NA), #mark missing data as NA rather than 0
Gnospline=G,
G= applyspline(G,6),
target.velocity=parabolicdiff(Targ,7)*samplerate,
Gv=parabolicdiff(G,7)*samplerate, #calculate velocity
Hv=parabolicdiff(H,7)*samplerate,
# gazeshifts=markMovementsDouble(Gv,threshold1=100,threshold2=10),
gazeshifts=markSaccadesDouble(Gv,threshold1=100,threshold2=20,
driftcorrect = FALSE,markFixations = FALSE),
headmovement=markMovementsDouble(Hv,threshold1=10,threshold2=4)) %>%
do(markTagetMovements(t=.,buffer=200,threshold=200,trial.length=500))%>%
filter(!is.na(trialnum))->
h
h %>%
group_by(block, trialnum) %>%
mutate(Targ = replace(Targ, (counter< 200 & task=='AS'), 0)) ->
h
h %>%
filter(!is.na(trialnum)) %>%
group_by(task,subject,block,trialnum) %>%
do(measureTrial(.))->
hm
h <- left_join(h, hm)
saveRDS(h, paste0('dashboards/output/',task,'/newtrialetest', Sys.Date(),'.RDS'))
saveRDS(h, paste0('dashboards/output/',task,'/newtrialetest', Sys.Date(),'.RDS'))
output_file = paste0('dashboards/output/',task',/newdashboard', Sys.Date(),'.RDS')
saveRDS(hm, output_file)
output_file = paste0('dashboards/output/',task',/newdashboard', Sys.Date(),'.RDS')
saveRDS(h, paste0('dashboards/output/',task,'/newtrialtest', Sys.Date(),'.RDS'))
output_file = paste0('dashboards/output/',task,'/newdashboard', Sys.Date(),'.RDS')
saveRDS(hm, output_file)
# load data in 'global' chunk so it can be shared by all users of the dashboard
library(ggplot2)
library(mgcv)
library(plotly)
library(ggpubr)
library(dplyr)
task = 'ST'
hm <- readRDS(paste0('output/',task,'/newdashboard2019-10-19.RDS'))
samplerate<- 304.7508/1000
hm %>%
group_by(subject) %>%
mutate(block_simple = dense_rank(blocknum))->
hm
hm %>%
mutate(gaze.onset.ms=(gaze.onset-200)/samplerate,
head.onset.ms=(head.onset-200)/samplerate,
gaze.dur.ms=(gaze.dur)/samplerate,
IEPr=IEP*sign(gaze.amp),
gaze.gain=gaze.amp/target.amp) %>%
filter(missing.gs<15,
gaze.onset.ms>150,
gaze.onset.ms<500,
abs(peak.gaze.velocity) > 200) %>%
ungroup() %>%
select(block_simple,
peak.gaze.velocity,
gaze.onset.ms,
head.onset.ms,
gaze.dur.ms,
gaze.gain,
peak.head.velocity,
head.contribution,
gaze.amp,
gaze.dur,
subject,
block,
blocknum,
trialnum,
target.amp,
head.amp,
IEPr,
IGP,
post.VOR.EP,
gaze.steps,
total.gaze.amp,
total.gaze.dur,
total.head.contribution)->
hpp
# hpp <- mutate(hpp,amp.bins.combined=cut(abs(target.amp),breaks=c(0,10,20,30,40,50,60,70,80)))
hpp <- mutate(hpp,amp.bins.20 = cut(abs(target.amp),breaks=c(0,20,40,60,80)))
hpp <- mutate(hpp,amp.bins.15 = cut(abs(target.amp),breaks=c(0,15,30,45,60,75,90)))
hpp <- mutate(hpp,amp.bins.10 = cut(abs(target.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
hpp <- mutate(hpp,gaze.amp.bins.10 = cut(abs(gaze.amp),breaks=c(0,10,20,30,40,50,60,70,80,90)))
hpp <-  mutate(hpp, iep_centered_10 = case_when(
abs(IEPr) <= 10 ~ "centered",
TRUE ~ "off-center"),
iep_bin_15= case_when(
IEPr > 0 & IEPr <=15 ~ '(0,15]',
IEPr > 15 & IEPr <=30 ~ '(15,30]',
IEPr < 0 & IEPr >= -15 ~ '[-15,0)',
IEPr < -15 & IEPr >= -30 ~ '[-30,-15)'),
iep_bin_6= case_when(
abs(IEPr) < 6 ~ '(-6, 6)',
IEPr > 6 & IEPr <=18 ~ '(6,18]',
IEPr > 18 & IEPr <=30 ~ '(18,30]',
IEPr < -6 & IEPr >= -18 ~ '[-18,6)',
IEPr < -18 & IEPr >= -30 ~ '[-30,-18)'),
gaze_dir = case_when(
gaze.amp> 0 ~ 'RIGHTWARD',
gaze.amp<0 ~ 'LEFTWARD'
),
iep_centered = as.factor(iep_centered_10),
iep_bin_6 = as.factor(iep_bin_6),
iep_bin_15 = as.factor(iep_bin_15),
gaze_dir = as.factor(gaze_dir))
#remove NA bins and extra blocks
hpp %>%
filter(!is.na(amp.bins.15))->
hpp
hpp %>%
mutate(blocknum= as.factor(block_simple),
block= as.factor(block),
subject=as.factor(subject))->
dataset
head(dataset)
write.csv(dataset, 'demo_spreadsheet.csv')
ggplot(dashboard)+geom_hist(IEP)+facet_wrap(~block)
ggplot(dataset)+geom_hist(IEP)+facet_wrap(~block)
ggplot(dataset)+geom_histogram(IEP)+facet_wrap(~block)
ggplot(dataset)+geom_histogram(aes(IEP))+facet_wrap(~block)
ggplot(dataset)+geom_histogram(aes(IEPr))+facet_wrap(~block)
qplot(IGR, hm)
qplot(IGR, data = hm)
